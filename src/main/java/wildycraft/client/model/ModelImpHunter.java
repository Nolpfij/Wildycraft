// Date: 3/31/2013 2:53:36 PM
// Template version 1.1
// Java generated by Techne
// Keep in mind that you still need to fill in some blanks
// - ZeuX






package wildycraft.client.model;

import net.minecraft.client.model.ModelBase;
import net.minecraft.client.model.ModelRenderer;
import net.minecraft.entity.Entity;
import net.minecraft.util.MathHelper;

public class ModelImpHunter extends ModelBase
{
  //fields
    public ModelRenderer bipedHead;
    ModelRenderer body;
    public ModelRenderer bipedRightArm;
    ModelRenderer leftarm;
    ModelRenderer rightleg;
    ModelRenderer leftleg;
    ModelRenderer arm_pad_1;
    ModelRenderer Shape1;
    ModelRenderer Shape2;
    ModelRenderer imp_hood_horn_1;
    ModelRenderer imp_hood_horn_2;
    ModelRenderer arm_pad_2;
    ModelRenderer arm_spike_1;
    ModelRenderer arm_spike_2;
  
  public ModelImpHunter(){
    textureWidth = 64;
    textureHeight = 64;
    
      bipedHead = new ModelRenderer(this, 17, 6);
      bipedHead.addBox(-4F, -8F, -4F, 8, 8, 8);
      bipedHead.setRotationPoint(0F, 0F, 0F);
      bipedHead.setTextureSize(64, 64);
      bipedHead.mirror = true;
      setRotation(bipedHead, 0F, 0F, 0F);
      body = new ModelRenderer(this, 35, 25);
      body.addBox(-4F, 0F, -2F, 8, 12, 4);
      body.setRotationPoint(0F, 0F, 0F);
      body.setTextureSize(64, 64);
      body.mirror = true;
      setRotation(body, 0F, 0F, 0F);
      bipedRightArm = new ModelRenderer(this, 13, 25);
      bipedRightArm.addBox(-3F, -2F, -2F, 4, 12, 4);
      bipedRightArm.setRotationPoint(-5F, 2F, 0F);
      bipedRightArm.setTextureSize(64, 64);
      bipedRightArm.mirror = true;
      setRotation(bipedRightArm, 0F, 0F, 0F);
      leftarm = new ModelRenderer(this, 13, 25);
      leftarm.addBox(-1F, -2F, -2F, 4, 12, 4);
      leftarm.setRotationPoint(5F, 2F, 0F);
      leftarm.setTextureSize(64, 64);
      leftarm.mirror = true;
      setRotation(leftarm, 0F, 0F, 0F);
      rightleg = new ModelRenderer(this, 22, 46);
      rightleg.addBox(-2F, 0F, -2F, 4, 12, 4);
      rightleg.setRotationPoint(-2F, 12F, 0F);
      rightleg.setTextureSize(64, 64);
      rightleg.mirror = true;
      setRotation(rightleg, 0F, 0F, 0F);
      leftleg = new ModelRenderer(this, 22, 46);
      leftleg.addBox(-2F, 0F, -2F, 4, 12, 4);
      leftleg.setRotationPoint(2F, 12F, 0F);
      leftleg.setTextureSize(64, 64);
      leftleg.mirror = true;
      setRotation(leftleg, 0F, 0F, 0F);
      arm_pad_1 = new ModelRenderer(this, 1, 27);
      arm_pad_1.addBox(3F, -1F, -2F, 1, 5, 4);
      arm_pad_1.setRotationPoint(5F, 2F, 0F);
      arm_pad_1.setTextureSize(64, 64);
      arm_pad_1.mirror = true;
      setRotation(arm_pad_1, 0F, 0F, 0F);
      Shape1 = new ModelRenderer(this, 4, 23);
      Shape1.addBox(-5F, 2F, 0F, 2, 1, 0);
      Shape1.setRotationPoint(-5F, 2F, 0F);
      Shape1.setTextureSize(64, 64);
      Shape1.mirror = true;
      setRotation(Shape1, 0F, 0F, 0.5061455F);
      Shape2 = new ModelRenderer(this, 4, 23);
      Shape2.addBox(-4F, 3.8F, 0F, 2, 1, 0);
      Shape2.setRotationPoint(-5F, 2F, 0F);
      Shape2.setTextureSize(64, 64);
      Shape2.mirror = true;
      setRotation(Shape2, 0F, 0F, 0.5061455F);
      imp_hood_horn_1 = new ModelRenderer(this, 22, 0);
      imp_hood_horn_1.addBox(3.5F, -10.7F, 3F, 0, 3, 1);
      imp_hood_horn_1.setRotationPoint(0F, 0F, 0F);
      imp_hood_horn_1.setTextureSize(64, 64);
      imp_hood_horn_1.mirror = true;
      setRotation(imp_hood_horn_1, 0.8901179F, 0F, 0F);
      imp_hood_horn_2 = new ModelRenderer(this, 22, 0);
      imp_hood_horn_2.addBox(-3.5F, -10.7F, 3F, 0, 3, 1);
      imp_hood_horn_2.setRotationPoint(0F, 0F, 0F);
      imp_hood_horn_2.setTextureSize(64, 64);
      imp_hood_horn_2.mirror = true;
      setRotation(imp_hood_horn_2, 0.8901179F, 0F, 0F);
      arm_pad_2 = new ModelRenderer(this, 1, 27);
      arm_pad_2.addBox(-4F, -1F, -2F, 1, 5, 4);
      arm_pad_2.setRotationPoint(-5F, 2F, 0F);
      arm_pad_2.setTextureSize(64, 64);
      arm_pad_2.mirror = true;
      setRotation(arm_pad_2, 0F, 0F, 0F);
      arm_spike_1 = new ModelRenderer(this, 4, 23);
      arm_spike_1.addBox(3F, 2F, 0F, 2, 1, 0);
      arm_spike_1.setRotationPoint(5F, 2F, 0F);
      arm_spike_1.setTextureSize(64, 64);
      arm_spike_1.mirror = true;
      setRotation(arm_spike_1, 0F, 0F, -0.5061455F);
      arm_spike_2 = new ModelRenderer(this, 4, 23);
      arm_spike_2.addBox(2F, 3.8F, 0F, 2, 1, 0);
      arm_spike_2.setRotationPoint(5F, 2F, 0F);
      arm_spike_2.setTextureSize(64, 64);
      arm_spike_2.mirror = true;
      setRotation(arm_spike_2, 0F, 0F, -0.5061455F);
  }
  
  public void render(Entity entity, float f, float f1, float f2, float f3, float f4, float f5)
  {
    //super.render(entity, f, f1, f2, f3, f4, f5);
    setRotationAngles(f, f1, f2, f3, f4, f5, entity);
    bipedHead.render(f5);
    body.render(f5);
    bipedRightArm.render(f5);
    leftarm.render(f5);
    rightleg.render(f5);
    leftleg.render(f5);
    arm_pad_1.render(f5);
    Shape1.render(f5);
    Shape2.render(f5);
    imp_hood_horn_1.render(f5);
    imp_hood_horn_2.render(f5);
    arm_pad_2.render(f5);
    arm_spike_1.render(f5);
    arm_spike_2.render(f5);
    
  }
  
  private void setRotation(ModelRenderer model, float x, float y, float z)
  {
    model.rotateAngleX = x;
    model.rotateAngleY = y;
    model.rotateAngleZ = z;
  }
  
  public void setRotationAngles(float par1, float par2, float par3, float par4, float par5, float par6, Entity entity)
  {
    super.setRotationAngles(par1, par2, par3, par4, par5, par6, entity);
    this.bipedHead.rotateAngleY = par4 / (180F / (float)Math.PI);
    this.bipedHead.rotateAngleX = par5 / (180F / (float)Math.PI);
    imp_hood_horn_1.rotateAngleX = this.bipedHead.rotateAngleX + 0.8901179F;
    imp_hood_horn_1.rotateAngleY = this.bipedHead.rotateAngleY;
    imp_hood_horn_2.rotateAngleX = this.bipedHead.rotateAngleX + 0.8901179F;
    imp_hood_horn_2.rotateAngleY = this.bipedHead.rotateAngleY;
    this.rightleg.rotateAngleX =  MathHelper.cos(par1 * 0.6662F) * 1.4F * par2;
    this.leftleg.rotateAngleX = MathHelper.cos(par1 * 0.6662F + (float)Math.PI) * 1.4F * par2;
    
    this.bipedRightArm.rotateAngleX = MathHelper.cos(par1 * 0.6662F + (float)Math.PI) * 2.0F * par2 * 0.5F;
    this.leftarm.rotateAngleX = MathHelper.cos(par1 * 0.6662F) * 2.0F * par2 * 0.5F;
    this.bipedRightArm.rotateAngleZ = 0.0F;
    this.leftarm.rotateAngleZ = 0.0F;
    this.bipedRightArm.rotateAngleZ += MathHelper.cos(par3 * 0.09F) * 0.05F + 0.05F;
    this.leftarm.rotateAngleZ -= MathHelper.cos(par3 * 0.09F) * 0.05F + 0.05F;
    this.bipedRightArm.rotateAngleX += MathHelper.sin(par3 * 0.067F) * 0.05F;
    this.leftarm.rotateAngleX -= MathHelper.sin(par3 * 0.067F) * 0.05F;
    arm_pad_2.rotateAngleX = bipedRightArm.rotateAngleX;
    arm_pad_2.rotateAngleZ = bipedRightArm.rotateAngleZ;
    arm_pad_1.rotateAngleX = leftarm.rotateAngleX;
    arm_pad_1.rotateAngleZ = leftarm.rotateAngleZ;
    Shape1.rotateAngleX = bipedRightArm.rotateAngleX;
    Shape1.rotateAngleZ = bipedRightArm.rotateAngleZ + 0.5061455F;
    Shape2.rotateAngleX = bipedRightArm.rotateAngleX;
    Shape2.rotateAngleZ = bipedRightArm.rotateAngleZ + 0.5061455F;
    arm_spike_1.rotateAngleX = leftarm.rotateAngleX;
    arm_spike_1.rotateAngleZ = leftarm.rotateAngleZ - 0.5061455F;
    arm_spike_2.rotateAngleX = leftarm.rotateAngleX;
    arm_spike_2.rotateAngleZ = leftarm.rotateAngleZ - 0.5061455F;
  }

}
